GammaPrime = constant
)
# , initial = c(0.9741405 ,0.0000000 ,6., 5.)
# , threads = 2
)
mabuya.model <- mark(data = mabuya.process,
ddl = mabuya.ddl,
model.parameters = list(
alpha = alpha.effort
# U = U,
# sigma = constant,
# GammaDoublePrime = constant,
# GammaPrime = constant
)
# , initial = c(0.9741405 ,0.0000000 ,6., 5.)
# , threads = 2
)
knownMarks
ch
summary(ch)
unique(ch$ch)
unique(ch$colonies)
ch$colonies
knownMarks
unique(mabuya.process)
ch$ <- as.character(ch$ch) # Convert factor to character
library("RMark")
library("xlsx")
ch <- read.xlsx(file = file.path(getwd(), "data/dataMabuya.xlsx"),
header = TRUE,
sheetName = "ch",
as.data.frame = TRUE)
ch$ch <- as.character(ch$ch) # Convert factor to character
ch$colonies <- as.character(ch$colonies) # Convert factor to character
covars <- read.xlsx(file = file.path(getwd(), "data/dataMabuya.xlsx"),
header = TRUE,
sheetName = "covars",
as.data.frame = TRUE)
nocc <- 6 # Number of occasions
groupsNames <- unique(covars$colonies) # Names of groups
nGroups <- length(groupsNames) # Number of groups
unmarkedSeen <- matrix(covars[, "unmarkedSeen"], nrow = nGroups, ncol = nocc, byrow = TRUE)
markedUnidentified <- matrix(covars[, "markedUnidentified"], nrow = nGroups, ncol = nocc, byrow = TRUE)
knownMarks <- matrix(covars[, "knownMarks"], nrow = nGroups, ncol = nocc, byrow = TRUE)
effort <- matrix(covars[, "effort"], nrow = nGroups, ncol = nocc, byrow = TRUE)
mabuya.process <- process.data(ch,
model = "PoissonMR",
time.intervals = rep(1, times = (nocc-1)),
groups = "colonies",
counts = list("Unmarked Seen" = unmarkedSeen,
"Marked Unidentified" = markedUnidentified,
"Known Marks" = knownMarks))
mabuya.ddl <- make.design.data(mabuya.process)
names(mabuya.ddl) # Check parameters from the model. Add effort to alpha (mean resighting rate during primary interval), as more effort, increases the chances of observing an individual
mabuya.ddl$alpha$effort <- as.numeric(apply(X = mabuya.ddl$alpha, 1, function(x){
col <- x[["group"]]
occ <- as.numeric(x[["time"]])
eff <- covars[covars$colonies==col&covars$occasion==occ, "effort"]
})
)
# Modelo
alpha.effort <- list(formula = ~ effort)
Phi <- list(formula = ~ 1)
U <- list(formula = ~ colonies)
constant <- list(formula = 0)
# Running the model
mabuya.model <- mark(data = mabuya.process,
ddl = mabuya.ddl,
model.parameters = list(
alpha = alpha.effort
# U = U,
# sigma = constant,
# GammaDoublePrime = constant,
# GammaPrime = constant
)
# , initial = c(0.9741405 ,0.0000000 ,6., 5.)
# , threads = 2
)
knownMarks
cleanup()
y
y
library("RMark")
library("xlsx")
ch <- read.xlsx(file = file.path(getwd(), "data/dataMabuya.xlsx"),
header = TRUE,
sheetName = "ch",
as.data.frame = TRUE)
ch$ch <- as.character(ch$ch) # Convert factor to character
covars <- read.xlsx(file = file.path(getwd(), "data/dataMabuya.xlsx"),
header = TRUE,
sheetName = "covars",
as.data.frame = TRUE)
nocc <- 6 # Number of occasions
groupsNames <- unique(covars$colonies) # Names of groups
nGroups <- length(groupsNames) # Number of groups
unmarkedSeen <- matrix(covars[, "unmarkedSeen"], nrow = nGroups, ncol = nocc, byrow = TRUE)
markedUnidentified <- matrix(covars[, "markedUnidentified"], nrow = nGroups, ncol = nocc, byrow = TRUE)
knownMarks <- matrix(covars[, "knownMarks"], nrow = nGroups, ncol = nocc, byrow = TRUE)
effort <- matrix(covars[, "effort"], nrow = nGroups, ncol = nocc, byrow = TRUE)
mabuya.process <- process.data(ch,
model = "PoissonMR",
time.intervals = rep(1, times = (nocc-1)),
groups = "colonies",
counts = list("Unmarked Seen" = unmarkedSeen,
"Marked Unidentified" = markedUnidentified,
"Known Marks" = knownMarks))
mabuya.ddl <- make.design.data(mabuya.process)
names(mabuya.ddl) # Check parameters from the model. Add effort to alpha (mean resighting rate during primary interval), as more effort, increases the chances of observing an individual
mabuya.ddl$alpha$effort <- as.numeric(apply(X = mabuya.ddl$alpha, 1, function(x){
col <- x[["group"]]
occ <- as.numeric(x[["time"]])
eff <- covars[covars$colonies==col&covars$occasion==occ, "effort"]
})
)
# Modelo
alpha.effort <- list(formula = ~ effort)
Phi <- list(formula = ~ 1)
U <- list(formula = ~ colonies)
constant <- list(formula = 0)
# Running the model
mabuya.model <- mark(data = mabuya.process,
ddl = mabuya.ddl,
model.parameters = list(
alpha = alpha.effort
# U = U,
# sigma = constant,
# GammaDoublePrime = constant,
# GammaPrime = constant
)
# , initial = c(0.9741405 ,0.0000000 ,6., 5.)
# , threads = 2
)
# ERROR: Number of marks known does not match number animals of encounter histories.
#Check data!
mabuya.model <- mark(data = mabuya.process,
ddl = mabuya.ddl,
model.parameters = list(
alpha = alpha.effort,
U = U,
sigma = constant,
GammaDoublePrime = constant,
GammaPrime = constant
)
# , initial = c(0.9741405 ,0.0000000 ,6., 5.)
# , threads = 2
)
# ERROR: Number of marks known does not match number animals of encounte
?make.design.data
library("RMark")
library("xlsx")
ch <- read.xlsx(file = file.path(getwd(), "data/dataMabuya.xlsx"),
header = TRUE,
sheetName = "ch",
as.data.frame = TRUE)
ch$ch <- as.character(ch$ch) # Convert factor to character
covars <- read.xlsx(file = file.path(getwd(), "data/dataMabuya.xlsx"),
header = TRUE,
sheetName = "covars",
as.data.frame = TRUE)
nocc <- 6 # Number of occasions
groupsNames <- unique(covars$colonies) # Names of groups
nGroups <- length(groupsNames) # Number of groups
unmarkedSeen <- matrix(covars[, "unmarkedSeen"], nrow = nGroups, ncol = nocc, byrow = TRUE)
markedUnidentified <- matrix(covars[, "markedUnidentified"], nrow = nGroups, ncol = nocc, byrow = TRUE)
knownMarks <- matrix(covars[, "knownMarks"], nrow = nGroups, ncol = nocc, byrow = TRUE)
effort <- matrix(covars[, "effort"], nrow = nGroups, ncol = nocc, byrow = TRUE)
mabuya.process <- process.data(ch,
model = "PoissonMR",
time.intervals = rep(1, times = (nocc-1)),
groups = "colonies",
counts = list("Unmarked Seen" = unmarkedSeen,
"Marked Unidentified" = markedUnidentified,
"Known Marks" = knownMarks))
mabuya.ddl <- make.design.data(mabuya.process)
names(mabuya.ddl) # Check parameters from the model. Add effort to alpha (mean resighting rate during primary interval), as more effort, increases the chances of observing an individual
mabuya.ddl$alpha$effort <- as.numeric(apply(X = mabuya.ddl$alpha, 1, function(x){
col <- x[["group"]]
occ <- as.numeric(x[["time"]])
eff <- covars[covars$colonies==col&covars$occasion==occ, "effort"]
})
)
# Modelo
alpha.effort <- list(formula = ~ effort)
Phi <- list(formula = ~ 1)
U <- list(formula = ~ colonies)
constant <- list(formula = ~ 1)
zero <- list(formula = ~ 1, fixed = 0)
# Running the model
mabuya.model <- mark(data = mabuya.process,
ddl = mabuya.ddl,
model.parameters = list(
alpha = alpha.effort,
U = U,
sigma = zero,
GammaDoublePrime = constant,
GammaPrime = constant
)
# , initial = c(0.9741405 ,0.0000000 ,6., 5.)
# , threads = 2
)
summary(mod)
summary(mabuya.model)
mabuya.model
mabuya.model$results$real.vcv
mabuya.model$results$real
mabuya.process
names(mabuya.process)
names(mabuya.ddl)
mabuya.model
summary(mabuya.model)
class(mabuya.model)
mabuya.model$output
mabuya.model$results$real
Phi <- list(formula = ~ 1, fixed = 1)
mabuya.model <- mark(data = mabuya.process,      # Here we use the processed data
ddl = mabuya.ddl,           # Here we use the designed data
model.parameters = list(    # Here are the parameters's models set on step 4.
alpha = alpha.effort,
Phi = Phi,
U = U,
sigma = zero,
GammaDoublePrime = constant,
GammaPrime = constant
)
)
mabuya.model$results$real
mabuya.model
summary(mabuya.model)
mabuya.model$results$derived
mabuya.model$results$derived.vcv
mabuya.model$results$covariate.values
mabuya.model$results$singular
mabuya.model$results$derived
mabuya.model$results$derived$`N Population Size`
ch$colonies
unique(ch$colonies)
populationSize <- cbind(mabuya.model$results$derived$`N Population Size`, Location = ch$colonies)
mabuya.model$results$derived$`N Population Size`
populationSize <- cbind(Location = ch$colonies, mabuya.model$results$derived$`N Population Size`)
ch$colonies
mabuya.model$data$data
mabuya.model$number.of.groups
mabuya.model$design.matrix
mabuya.model$strata.labels
mabuya.model$results
8*8
73/8
ch
covars
populationSize <- cbind(covars$colonies, mabuya.model$results$derived$`N Population Size`)
populationSize
unique(populationSize)
install.packages("reproducible")
library("reproducible")
populationSize <- cbind(covars$colonies, mabuya.model$results$derived$`N Population Size`) %>%
unique()
populationSize
names(populationSize) <- c("Locations", "Estimate", "Standard.Error", "LowerCI", "UpperCI")
populationSize
names(populationSize) <- c("locations", "estimate", "standard.error", "lowerCI", "upperCI")
populationSize
areaSizes <- data.frame(locations = populationSize$Locations,
areaSize = c(36.7, 44.92, 7.7, 13.5, 15, 52, 48, 30))
areaSizes <- data.frame(locations = populationSize$locations,
areaSize = c(36.7, 44.92, 7.7, 13.5, 15, 52, 48, 30))
populationSize$locations
populationSize <- cbind(covars$colonies, mabuya.model$results$derived$`N Population Size`)
populationSize
populationSize <- cbind(covars$colonies, mabuya.model$results$derived$`N Population Size`) %>%
unique() %>%
.[populationSize$se > 0]
populationSize <- cbind(covars$colonies, mabuya.model$results$derived$`N Population Size`) %>%
unique() %>%
.[populationSize$se > 0,]
populationSize
populationSize <- cbind(covars$colonies, mabuya.model$results$derived$`N Population Size`) %>%
unique()
populationSize
populationSize[populationSize$se > 0,]
names(populationSize) <- c("locations", "estimate", "standard.error", "lowerCI", "upperCI")
populationSize <- cbind(covars$colonies, mabuya.model$results$derived$`N Population Size`) %>%
unique() %>%
populationSize[populationSize$se > 0,]
populationSize <- cbind(covars$colonies, mabuya.model$results$derived$`N Population Size`) %>%
unique()
populationSize <-  populationSize[populationSize$se > 0,]
names(populationSize) <- c("locations", "estimate", "standard.error", "lowerCI", "upperCI")
populationSize
areaSizes <- data.frame(locations = populationSize$locations,
areaSize = c(36.7, 44.92, 7.7, 13.5, 15, 52, 48, 30))
areaSizes
areaSizes <- data.frame(areaSize = c(36.7, 44.92, 7.7, 13.5, 15, 52, 48, 30))
areaSizes
populationSize$areaSize <- data.frame(areaSize = c(36.7, 44.92, 7.7, 13.5, 15, 52, 48, 30))
populationSize
populationSize$density <- populationSize$estimate/populationSize$areaSize
populationSize
populationSize$density <- data.frame(density = populationSize$estimate/populationSize$areaSize)
populationSize
populationSize <- cbind(covars$colonies, mabuya.model$results$derived$`N Population Size`) %>%
unique()
populationSize <-  populationSize[populationSize$se > 0,]
names(populationSize) <- c("locations", "estimate", "standard.error", "lowerCI", "upperCI")
populationSize
populationSize$areaSize <- data.frame(areaSize = c(36.7, 44.92, 7.7, 13.5, 15, 52, 48, 30))
populationSize
populationSize$density <- data.frame(density = populationSize$estimate/populationSize$areaSize)
populationSize
64.77139/36.70
density <- data.frame(density = populationSize$estimate/populationSize$areaSize)
populationSize <- cbind(covars$colonies, mabuya.model$results$derived$`N Population Size`) %>%
unique()
populationSize <-  populationSize[populationSize$se > 0,]
names(populationSize) <- c("locations", "estimate", "standard.error", "lowerCI", "upperCI")
populationSize$areaSize <- data.frame(areaSize = c(36.7, 44.92, 7.7, 13.5, 15, 52, 48, 30))
density <- data.frame(density = populationSize$estimate/populationSize$areaSize)
populationSize <- cbind(populationSize, density)
populationSize
names(populationSize) <- c("locations", "estimate", "standard.error", "lowerCI", "upperCI", "areaSize", "density")
populationSize
library("RMark")
library("xlsx")
library("reproducible")
ch <- read.xlsx(file = file.path(getwd(), "data/dataMabuya.xlsx"),
header = TRUE,
sheetName = "ch",
as.data.frame = TRUE)
ch$ch <- as.character(ch$ch) # Convert factor to character
covars <- read.xlsx(file = file.path(getwd(), "data/dataMabuya.xlsx"),
header = TRUE,
sheetName = "covars",
as.data.frame = TRUE)
nocc <- 6 # Number of occasions
groupsNames <- unique(covars$colonies) # Names of groups
nGroups <- length(groupsNames) # Number of groups
unmarkedSeen <- matrix(covars[, "unmarkedSeen"],
nrow = nGroups,
ncol = nocc,
byrow = TRUE) # counts of unmarked individuals seen
markedUnidentified <- matrix(covars[, "markedUnidentified"],
nrow = nGroups,
ncol = nocc,
byrow = TRUE) # counts of marked individuals unidentified
knownMarks <- matrix(covars[, "knownMarks"],
nrow = nGroups,
ncol = nocc,
byrow = TRUE) # counts of known marked individuals
effort <- matrix(covars[, "effort"],
nrow = nGroups,
ncol = nocc,
byrow = TRUE) # effort of observation in each colony at each time
alpha.effort <- list(formula = ~ effort)
Phi <- list(formula = ~ 1, fixed = 1)
U <- list(formula = ~ colonies)
constant <- list(formula = ~ 1) # Here I create a generic constant model to be used to terms that I need
zero <- list(formula = ~ 1, fixed = 0) # Here I create a generic zero model to be used to terms that I need
mabuya.process <- process.data(ch,
model = "PoissonMR",
time.intervals = rep(1, times = (nocc-1)),
groups = "colonies",
counts = list("Unmarked Seen" = unmarkedSeen,
"Marked Unidentified" = markedUnidentified,
"Known Marks" = knownMarks))
mabuya.process
names(mabuya.process)
mabuya.ddl <- make.design.data(mabuya.process)
names(mabuya.ddl)
mabuya.ddl$alpha
mabuya.ddl$alpha$effort <- as.numeric(apply(X = mabuya.ddl$alpha, 1, function(x){
col <- x[["group"]]
occ <- as.numeric(x[["time"]])
eff <- covars[covars$colonies==col&covars$occasion==occ, "effort"]
})
)
mabuya.ddl$alpha
getwd()
setwd(dir = file.path(getwd(), "outputs"))
getwd()
mabuya.model <- mark(data = mabuya.process,      # Here we use the processed data
ddl = mabuya.ddl,           # Here we use the designed data
model.parameters = list(    # Here are the parameters's models set on step 4.
alpha = alpha.effort,
Phi = Phi,
U = U,
sigma = zero,
GammaDoublePrime = constant,
GammaPrime = constant
)
)
mabuya.model$results$derived$`N Population Size`
populationSize <- cbind(covars$colonies, mabuya.model$results$derived$`N Population Size`) %>%
unique()
populationSize <-  populationSize[populationSize$se > 0,]
populationSize
populationSize$areaSize <- data.frame(areaSize = c(36.7, 44.92, 7.7, 13.5, 15, 52, 48, 30))
populationSize$density <- data.frame(density = populationSize$estimate/populationSize$areaSize)
names(populationSize) <- c("locations", "estimate", "standard.error", "lowerCI", "upperCI", "areaSize", "density")
populationSize
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: load libraries
suppressWarnings(library("RMark"))
suppressWarnings(library("xlsx"))
suppressWarnings(library("reproducible"))
# Chunk 4: data
directory <- getwd()
ch <- read.xlsx(file = file.path(getwd(), "data/dataMabuya.xlsx"),
header = TRUE,
sheetName = "ch",
as.data.frame = TRUE)
ch$ch <- as.character(ch$ch) # Convert factor to character
covars <- read.xlsx(file = file.path(getwd(), "data/dataMabuya.xlsx"),
header = TRUE,
sheetName = "covars",
as.data.frame = TRUE)
# Chunk 5: variables
nocc <- 6 # Number of occasions
groupsNames <- unique(covars$colonies) # Names of groups
nGroups <- length(groupsNames) # Number of groups
unmarkedSeen <- matrix(covars[, "unmarkedSeen"],
nrow = nGroups,
ncol = nocc,
byrow = TRUE) # counts of unmarked individuals seen
markedUnidentified <- matrix(covars[, "markedUnidentified"],
nrow = nGroups,
ncol = nocc,
byrow = TRUE) # counts of marked individuals unidentified
knownMarks <- matrix(covars[, "knownMarks"],
nrow = nGroups,
ncol = nocc,
byrow = TRUE) # counts of known marked individuals
effort <- matrix(covars[, "effort"],
nrow = nGroups,
ncol = nocc,
byrow = TRUE) # effort of observation in each colony at each time
# Chunk 6: models
alpha.effort <- list(formula = ~ effort)
Phi <- list(formula = ~ 1, fixed = 1)
U <- list(formula = ~ colonies)
constant <- list(formula = ~ 1) # Here I create a generic constant
# model to be used to terms that I need
zero <- list(formula = ~ 1, fixed = 0) # Here I create a generic zero
# model to be used to terms that I need
# Chunk 7: process data
mabuya.process <- process.data(ch,
model = "PoissonMR",
time.intervals = rep(1, times = (nocc-1)),
groups = "colonies",
counts = list("Unmarked Seen" = unmarkedSeen,
"Marked Unidentified" = markedUnidentified,
"Known Marks" = knownMarks))
mabuya.process
# Chunk 8: names mabuya.process
names(mabuya.process)
# Chunk 9: data design
mabuya.ddl <- make.design.data(mabuya.process)
# Chunk 10: names ddl
names(mabuya.ddl)
# Chunk 11: alpha
mabuya.ddl$alpha
# Chunk 12: add covariates
mabuya.ddl$alpha$effort <- as.numeric(apply(X = mabuya.ddl$alpha, 1, function(x){
col <- x[["group"]]
occ <- as.numeric(x[["time"]])
eff <- covars[covars$colonies==col&covars$occasion==occ, "effort"]
})
)
# Chunk 13: alpha2
mabuya.ddl$alpha
# Chunk 14: run_model
setwd(dir = file.path(getwd(), "outputs")) # Changing directory for outputs
mabuya.model <- mark(data = mabuya.process,      # Here we use the processed data
ddl = mabuya.ddl,           # Here we use the designed data
model.parameters = list(    # Here are the parameters's
alpha = alpha.effort, # models set on step 4.
Phi = Phi,
U = U,
sigma = zero,
GammaDoublePrime = constant,
GammaPrime = constant
)
)
setwd(dir = directory) # Changing directory back to original
# Chunk 15: derived
mabuya.model$results$derived$`N Population Size`
# Chunk 16: derived Final
populationSize <- cbind(covars$colonies, mabuya.model$results$derived$`N Population Size`) %>%
unique()
populationSize <-  populationSize[populationSize$se > 0,]
# Chunk 17: density
populationSize$areaSize <- c(36.7, 44.92, 7.7,
3.5, 15, 52, 48, 30)
density <- populationSize$estimate/populationSize$areaSize
populationSize <- cbind(populationSize, density)
colnames(populationSize) <- c("location", "estimate", "standard.error",
"lowerCI", "upperCI", "areaSize", "density")
# Chunk 18: final
knitr::kable(populationSize, digits = 2, align = "c", format = "pandoc", row.names = FALSE)
populationSize
populationSize$location
populationSize <- cbind(covars$colonies, mabuya.model$results$derived$`N Population Size`) %>%
unique()
populationSize <-  populationSize[populationSize$se > 0,]
populationSize$areaSize <- c(15, 52, 36.7,
48, 30, 13.5,
44.9, 7.7)
density <- populationSize$estimate/populationSize$areaSize
populationSize <- cbind(populationSize, density)
colnames(populationSize) <- c("location", "estimate", "standard.error",
"lowerCI", "upperCI", "areaSize", "density")
knitr::kable(populationSize, digits = 2, align = "c", format = "pandoc", row.names = FALSE)
